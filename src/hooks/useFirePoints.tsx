'use client';

import { useState, useEffect, useCallback } from 'react';
import { getFirePointsData, saveFirePointsData, resetFirePoints as resetFirePointsUtil } from '@/lib/firePointsUtils';

interface FirePointsData {
  points: number;
  lastUpdateTime: number;
  lastActiveTime: number;
  // Th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu c·ªßa ng√†y hi·ªán t·∫°i (ms). D√πng ƒë·ªÉ reset theo ng√†y
  dayStartTime?: number;
}

const POINTS_PER_MINUTE = 10;
const MAX_DAILY_FIRE_POINTS = 180;
const ONE_DAY_MS = 24 * 60 * 60 * 1000; // 24 gi·ªù t√≠nh b·∫±ng milliseconds

const getStartOfTodayMs = (): number => {
  const now = new Date();
  now.setHours(0, 0, 0, 0);
  return now.getTime();
};

export const useFirePoints = () => {
  const [firePoints, setFirePoints] = useState<number>(0);
  const [isOnline, setIsOnline] = useState<boolean>(true);
  const [isClient, setIsClient] = useState<boolean>(false);


  // T√≠nh to√°n ƒë·ªëm l·ª≠a d·ª±a tr√™n th·ªùi gian, c√≥ gi·ªõi h·∫°n/ng√†y
  const calculateFirePoints = useCallback((data: FirePointsData): number => {
    const now = Date.now();
    const timeSinceLastUpdate = now - data.lastUpdateTime;
    const timeSinceLastActive = now - data.lastActiveTime;
    const todayStart = getStartOfTodayMs();
    const dataDayStart = data.dayStartTime ?? todayStart;

    // N·∫øu ƒë√£ sang ng√†y m·ªõi so v·ªõi m·ªëc dayStart, reset v·ªÅ 0
    if (now >= dataDayStart + ONE_DAY_MS) {
      return 0;
    }

    // N·∫øu user kh√¥ng ho·∫°t ƒë·ªông qu√° 1 ng√†y, reset v·ªÅ 0
    if (timeSinceLastActive > ONE_DAY_MS) {
      return 0;
    }

    // T√≠nh s·ªë ph√∫t ƒë√£ tr√¥i qua k·ªÉ t·ª´ l·∫ßn c·∫≠p nh·∫≠t cu·ªëi
    const minutesPassed = Math.floor(timeSinceLastUpdate / (60 * 1000));
    
    // C·ªông th√™m ƒë·ªëm l·ª≠a cho m·ªói ph√∫t
    const additionalPoints = minutesPassed * POINTS_PER_MINUTE;
    const unclamped = Math.max(0, data.points + additionalPoints);
    const clamped = Math.min(unclamped, MAX_DAILY_FIRE_POINTS);
    
    console.log('üî• calculateFirePoints:', {
      timeSinceLastUpdate,
      minutesPassed,
      additionalPoints,
      currentPoints: data.points,
      result: clamped
    });
    
    return clamped;
  }, []);

  // C·∫≠p nh·∫≠t ƒë·ªëm l·ª≠a
  const updateFirePoints = useCallback(() => {
    const data = getFirePointsData();
    const now = Date.now();

    console.log('üî• updateFirePoints called:', { data, now });

    if (!data) {
      // T·∫°o d·ªØ li·ªáu m·ªõi n·∫øu ch∆∞a c√≥
      const newData: FirePointsData = {
        points: 0,
        lastUpdateTime: now,
        lastActiveTime: now,
        dayStartTime: getStartOfTodayMs()
      };
      saveFirePointsData(newData);
      setFirePoints(0);
      console.log('üî• Created new data:', newData);
      return;
    }

    // Migration d·ªØ li·ªáu c≈© kh√¥ng c√≥ dayStartTime
    const dayStartTime = data.dayStartTime ?? getStartOfTodayMs();

    // N·∫øu lastUpdateTime thu·ªôc ng√†y tr∆∞·ªõc h√¥m nay, reset theo ng√†y
    const startOfToday = getStartOfTodayMs();
    if (data.lastUpdateTime < startOfToday) {
      const resetData: FirePointsData = {
        points: 0,
        lastUpdateTime: now,
        lastActiveTime: now,
        dayStartTime: startOfToday
      };
      saveFirePointsData(resetData);
      setFirePoints(0);
      console.log('üî• Daily reset due to new day');
      return;
    }

    // Ki·ªÉm tra n·∫øu user kh√¥ng ho·∫°t ƒë·ªông qu√° 1 ng√†y
    const timeSinceLastActive = now - data.lastActiveTime;
    if (timeSinceLastActive > ONE_DAY_MS) {
      const resetData: FirePointsData = {
        points: 0,
        lastUpdateTime: now,
        lastActiveTime: now,
        dayStartTime
      };
      saveFirePointsData(resetData);
      setFirePoints(0);
      console.log('üî• Reset due to inactivity:', timeSinceLastActive);
      return;
    }

    // T√≠nh to√°n ƒë·ªëm l·ª≠a m·ªõi
    const newPoints = calculateFirePoints(data);
    
    console.log('üî• Calculating points:', {
      oldPoints: data.points,
      timeSinceLastUpdate: now - data.lastUpdateTime,
      minutesPassed: Math.floor((now - data.lastUpdateTime) / (60 * 1000)),
      newPoints
    });
    
    // C·∫≠p nh·∫≠t d·ªØ li·ªáu
    // Gi·ªõi h·∫°n theo ng√†y
    if (newPoints >= MAX_DAILY_FIRE_POINTS) {
      // Khi ƒë·∫°t tr·∫ßn, c·ªë ƒë·ªãnh ·ªü 180 cho t·ªõi khi sang ng√†y m·ªõi
      const cappedData: FirePointsData = {
        points: MAX_DAILY_FIRE_POINTS,
        lastUpdateTime: now,
        lastActiveTime: now,
        dayStartTime
      };
      saveFirePointsData(cappedData);
      setFirePoints(MAX_DAILY_FIRE_POINTS);
      console.log('üî• Reached daily cap:', MAX_DAILY_FIRE_POINTS);
      return;
    }

    const updatedData: FirePointsData = {
      points: newPoints,
      lastUpdateTime: now,
      lastActiveTime: now,
      dayStartTime
    };
    
    saveFirePointsData(updatedData);
    setFirePoints(newPoints);
    console.log('üî• Updated fire points:', newPoints);
  }, [calculateFirePoints]);

  // C·∫≠p nh·∫≠t th·ªùi gian ho·∫°t ƒë·ªông cu·ªëi (khi user t∆∞∆°ng t√°c)
  const updateLastActiveTime = useCallback(() => {
    const data = getFirePointsData();
    if (data) {
      const updatedData: FirePointsData = {
        ...data,
        lastActiveTime: Date.now()
      };
      saveFirePointsData(updatedData);
    }
  }, []);

  // Reset ƒë·ªëm l·ª≠a v·ªÅ 0 (khi clear cache ho·∫∑c logout)
  const resetFirePoints = useCallback(() => {
    resetFirePointsUtil();
    setFirePoints(0);
  }, []);

  // ƒê·∫£m b·∫£o ch·ªâ ch·∫°y tr√™n client ƒë·ªÉ tr√°nh hydration mismatch
  useEffect(() => {
    setIsClient(true);
  }, []);

  // Kh·ªüi t·∫°o ƒë·ªëm l·ª≠a khi component mount (ch·ªâ tr√™n client)
  useEffect(() => {
    if (isClient) {
      updateFirePoints();
    }
  }, [isClient, updateFirePoints]);

  // Thi·∫øt l·∫≠p timer ƒë·ªÉ c·∫≠p nh·∫≠t ƒë·ªëm l·ª≠a m·ªói ph√∫t (ch·ªâ tr√™n client)
  useEffect(() => {
    if (!isClient) return;
    
    console.log('üî• Setting up timer, isOnline:', isOnline);
    
    const interval = setInterval(() => {
      console.log('üî• Timer tick, isOnline:', isOnline);
      if (isOnline) {
        updateFirePoints();
      }
    }, 60 * 1000); // M·ªói ph√∫t

    return () => {
      console.log('üî• Clearing timer');
      clearInterval(interval);
    };
  }, [isClient, isOnline, updateFirePoints]);

  // Theo d√µi tr·∫°ng th√°i online/offline (ch·ªâ tr√™n client)
  useEffect(() => {
    if (!isClient) return;
    
    const handleOnline = () => {
      setIsOnline(true);
      updateFirePoints(); // C·∫≠p nh·∫≠t ngay khi online
    };

    const handleOffline = () => {
      setIsOnline(false);
    };

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    // Ki·ªÉm tra tr·∫°ng th√°i ban ƒë·∫ßu
    setIsOnline(navigator.onLine);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, [isClient, updateFirePoints]);

  // Theo d√µi c√°c s·ª± ki·ªán t∆∞∆°ng t√°c c·ªßa user ƒë·ªÉ c·∫≠p nh·∫≠t lastActiveTime (ch·ªâ tr√™n client)
  useEffect(() => {
    if (!isClient) return;
    
    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];
    
    const handleUserActivity = () => {
      updateLastActiveTime();
    };

    events.forEach(event => {
      document.addEventListener(event, handleUserActivity, true);
    });

    return () => {
      events.forEach(event => {
        document.removeEventListener(event, handleUserActivity, true);
      });
    };
  }, [isClient, updateLastActiveTime]);

  // Theo d√µi s·ª± ki·ªán beforeunload ƒë·ªÉ l∆∞u d·ªØ li·ªáu cu·ªëi c√πng (ch·ªâ tr√™n client)
  useEffect(() => {
    if (!isClient) return;
    
    const handleBeforeUnload = () => {
      updateLastActiveTime();
    };

    window.addEventListener('beforeunload', handleBeforeUnload);

    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, [isClient, updateLastActiveTime]);

  return {
    firePoints,
    isOnline,
    updateFirePoints,
    resetFirePoints,
    updateLastActiveTime
  };
};
