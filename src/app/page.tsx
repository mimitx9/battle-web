'use client';

import React, {useEffect, useRef, useState} from 'react';
import {RoomList, LoadingSpinner, CooldownOverlay, QuizCard, Leaderboard, HelpTool} from '@/components/ui';
import {QuizCardRef} from '@/components/ui/QuizCard';
import {useAuth} from '@/hooks/useAuth';
import {useQuizBattle} from '../hooks/useQuizBattle';
import {useUserBag} from '@/hooks/useUserBag';
import HomeLoginForm from '@/components/ui/HomeLoginForm';
import LayoutContent from '@/components/layout/LayoutContent';
import Header from '@/components/layout/Header';

const HomePage: React.FC = () => {
    const {user, isInitialized} = useAuth();
    const {
        rooms,
        currentRoom,
        wsConnected,
        roomWsConnected,
        loading,
        joiningRoom,
        error,
        joinError,
        showCooldown,
        showRoomTransition,
        quizQuestions,
        rankings,
        initialize,
        joinRoom,
        autoJoinRoom,
        leaveRoom,
        submitAnswer,
        sendHelpTool,
        onCooldownComplete,
        onRoomTransitionComplete
    } = useQuizBattle((scoreChange) => {
        setCurrentScoreChange(scoreChange);
        // Reset scoreChange sau 3 gi√¢y ƒë·ªÉ kh√¥ng hi·ªÉn th·ªã ƒëi·ªÉm c≈©
        setTimeout(() => setCurrentScoreChange(undefined), 3000);
    });
    
    const {userBag, loading: userBagLoading, error: userBagError, fetchUserBag, updateUserBag} = useUserBag();
    
    const hasInitializedRef = useRef(false);
    const hasAutoJoinedRef = useRef(false);
    const [showQuiz, setShowQuiz] = useState(false);
    const [currentScoreChange, setCurrentScoreChange] = useState<number | undefined>(undefined);
    const quizCardRef = useRef<QuizCardRef>(null);
    const [isTransitioningQuestion, setIsTransitioningQuestion] = useState(false);
    const [currentQuestionId, setCurrentQuestionId] = useState<number | null>(null);
    const [usedToolsThisQuestion, setUsedToolsThisQuestion] = useState<Set<string>>(new Set()); // server tool types: battleHint, battleSnow, ...

    // Initialize WebSocket khi user ƒë√£ ƒëƒÉng nh·∫≠p - reconnect n·∫øu disconnected
    const prevWsConnectedRef = useRef<boolean | undefined>(undefined);
    const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);
    const lastReconnectAttemptRef = useRef<number>(0);
    
    useEffect(() => {
        if (isInitialized && user) {
            // N·∫øu ch∆∞a initialize l·∫ßn ƒë·∫ßu
            if (!hasInitializedRef.current) {
                console.log('üîç HomePage: User authenticated, initializing Global WebSocket for the first time...');
                hasInitializedRef.current = true;
                initialize();
                fetchUserBag();
            } 
            // N·∫øu ƒë√£ initialize nh∆∞ng WebSocket b·ªã disconnected (chuy·ªÉn t·ª´ connected sang disconnected)
            else if (prevWsConnectedRef.current === true && wsConnected === false) {
                console.log('üîç HomePage: WebSocket disconnected, attempting to reconnect...');
                initialize();
            }
            // N·∫øu ƒë√£ initialize nh∆∞ng WebSocket kh√¥ng connected (c√≥ th·ªÉ do quay v·ªÅ trang home)
            // Ch·ªâ reconnect n·∫øu ƒë√£ qua √≠t nh·∫•t 2 gi√¢y t·ª´ l·∫ßn reconnect cu·ªëi c√πng
            else if (hasInitializedRef.current && !wsConnected) {
                const now = Date.now();
                const timeSinceLastReconnect = now - lastReconnectAttemptRef.current;
                
                // Clear timeout tr∆∞·ªõc n·∫øu c√≥
                if (reconnectTimeoutRef.current) {
                    clearTimeout(reconnectTimeoutRef.current);
                }
                
                // Ch·ªâ reconnect n·∫øu ƒë√£ qua 2 gi√¢y t·ª´ l·∫ßn reconnect cu·ªëi
                if (timeSinceLastReconnect > 2000) {
                    reconnectTimeoutRef.current = setTimeout(() => {
                        if (!wsConnected && isInitialized && user) {
                            console.log('üîç HomePage: WebSocket not connected, attempting to reconnect after returning to home...');
                            lastReconnectAttemptRef.current = Date.now();
                            initialize();
                        }
                    }, 500); // Delay 500ms
                }
            }
            
            // C·∫≠p nh·∫≠t ref ƒë·ªÉ track tr·∫°ng th√°i WebSocket
            prevWsConnectedRef.current = wsConnected;
        }
        
        // Cleanup timeout khi unmount
        return () => {
            if (reconnectTimeoutRef.current) {
                clearTimeout(reconnectTimeoutRef.current);
                reconnectTimeoutRef.current = null;
            }
        };
    }, [isInitialized, user, initialize, fetchUserBag, wsConnected]);

    // Detect khi user quay l·∫°i trang/tab v√† reconnect WebSocket n·∫øu c·∫ßn
    const visibilityTimeoutRef = useRef<NodeJS.Timeout | null>(null);
    
    useEffect(() => {
        const handleVisibilityChange = () => {
            if (document.visibilityState === 'visible' && isInitialized && user && hasInitializedRef.current && !wsConnected) {
                console.log('üîç HomePage: Page became visible, checking WebSocket connection...');
                
                // Clear timeout tr∆∞·ªõc n·∫øu c√≥
                if (visibilityTimeoutRef.current) {
                    clearTimeout(visibilityTimeoutRef.current);
                }
                
                // Reconnect n·∫øu WebSocket kh√¥ng connected sau 1 gi√¢y
                visibilityTimeoutRef.current = setTimeout(() => {
                    if (!wsConnected && isInitialized && user) {
                        console.log('üîç HomePage: WebSocket still not connected after page visible, reconnecting...');
                        initialize();
                    }
                }, 1000);
            }
        };

        document.addEventListener('visibilitychange', handleVisibilityChange);
        return () => {
            document.removeEventListener('visibilitychange', handleVisibilityChange);
            if (visibilityTimeoutRef.current) {
                clearTimeout(visibilityTimeoutRef.current);
                visibilityTimeoutRef.current = null;
            }
        };
    }, [isInitialized, user, wsConnected, initialize]);

    // Auto join room khi c√≥ closeCategoryCode v√† rooms ƒë√£ ƒë∆∞·ª£c load
    useEffect(() => {
        if (isInitialized && user && user.closeCategoryCode && rooms.length > 0 && !hasAutoJoinedRef.current && !currentRoom) {
            console.log('üîç HomePage: Auto joining room with closeCategoryCode:', user.closeCategoryCode);
            hasAutoJoinedRef.current = true;
            autoJoinRoom(user.closeCategoryCode);
        }
    }, [isInitialized, user, rooms, currentRoom, autoJoinRoom]);

    // Show quiz when questions are loaded and cooldown is complete
    useEffect(() => {
        console.log('üîç Quiz display check:', {
            quizQuestions: quizQuestions?.length,
            showCooldown,
            showQuiz
        });
        
        if (quizQuestions && quizQuestions.length > 0 && !showCooldown) {
            console.log('üîç Auto-showing quiz with', quizQuestions.length, 'questions');
            setShowQuiz(true);
        }
    }, [quizQuestions, showCooldown]);

    // Handler ƒë·ªÉ x·ª≠ l√Ω khi click v√†o room
    const handleRoomClick = async (room: any) => {
        console.log('üîç Room clicked:', room);
        console.log('üîç Room roomCode:', room.roomCode);
        console.log('üîç Room categoryCode:', room.categoryCode);
        
        // S·ª≠ d·ª•ng roomCode n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng categoryCode
        const roomCodeToUse = room.roomCode || room.categoryCode;
        
        if (roomCodeToUse) {
            console.log('üîç Joining room with code:', roomCodeToUse);
            try {
                await joinRoom(roomCodeToUse);
                // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t userBag sau khi join room th√†nh c√¥ng
                await fetchUserBag();
            } catch (error) {
                console.error('‚ùå Failed to join room:', error);
            }
        } else {
            console.error('‚ùå No room code found:', room);
        }
    };

    // Handler cho vi·ªác submit answer trong quiz (gi·ªØ l·∫°i n·∫øu c·∫ßn x·ª≠ l√Ω n·ªôi b·ªô kh√°c)
    const handleQuizAnswer = async (questionId: number, answerId: number, isCorrect: boolean, answerTime: number) => {
        // ƒê√£ chuy·ªÉn sang ƒë·ªÉ QuizCard t·ª± g·ªçi submitAnswer (c√≥ k√®m insane). Kh√¥ng g·ªçi ·ªü ƒë√¢y ƒë·ªÉ tr√°nh g·ª≠i tr√πng.
        return;
    };

    // Handler ƒë·ªÉ x·ª≠ l√Ω khi s·ª≠ d·ª•ng hint t·ª´ HelpTool
    const handleHintUsed = (questionId: number) => {
        console.log('üîç Hint used for question:', questionId);
        // Logic hint s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong QuizCard component
    };

    // Handler ƒë·ªÉ x·ª≠ l√Ω khi HelpTool ƒë∆∞·ª£c s·ª≠ d·ª•ng
    const handleHelpToolUsed = (toolType: string) => {
        console.log('üîç Help tool used:', toolType);
        if (toolType === 'battleHint') {
            // Trigger hint functionality trong QuizCard
            if (quizCardRef.current) {
                quizCardRef.current.useHint();
            }
        } else if (toolType === 'battleSnow') {
            // Trigger snow protection functionality trong QuizCard
            if (quizCardRef.current) {
                quizCardRef.current.useSnow();
            }
        }

        // ƒê√°nh d·∫•u tool ƒë√£ d√πng trong c√¢u hi·ªán t·∫°i (server tool type)
        setUsedToolsThisQuestion(prev => new Set([...prev, toolType]));
    };

    // Handler ƒë·ªÉ hi·ªÉn th·ªã tool effect
    const handleShowToolEffect = (toolType: string) => {
        console.log('üîç Showing tool effect for:', toolType);
        // G·ªçi showToolEffect t·ª´ QuizCardRef
        if (quizCardRef.current) {
            quizCardRef.current.showToolEffect(toolType);
        }
    };

    // Handler ƒë·ªÉ c·∫≠p nh·∫≠t userBag t·ª´ HelpTool
    const handleUserBagUpdate = (updatedUserBag: any) => {
        updateUserBag(updatedUserBag);
    };

    // Callback khi ƒë·ªïi c√¢u h·ªèi t·ª´ QuizCard
    const handleQuestionChange = (qid: number) => {
        setCurrentQuestionId(qid);
        // Reset danh s√°ch tool ƒë√£ d√πng cho c√¢u m·ªõi
        setUsedToolsThisQuestion(new Set());
    };

    // Callback tr·∫°ng th√°i chuy·ªÉn c√¢u
    const handleTransitionChange = (isTrans: boolean) => {
        setIsTransitioningQuestion(isTrans);
    };

    // Ki·ªÉm tra c√≥ th·ªÉ d√πng tool theo t·ª´ng lo·∫°i (client keys)
    const canUseTool = (toolKey: 'hint' | 'snow' | 'blockTop1' | 'blockBehind') => {
        // Map client key -> server tool type
        const mapping: Record<string, string> = {
            hint: 'battleHint',
            snow: 'battleSnow',
            blockTop1: 'battleBlockTop1',
            blockBehind: 'battleBlockBehind'
        };
        const serverTool = mapping[toolKey];
        if (!serverTool) return false;
        // Ch·∫∑n n·∫øu ƒëang chuy·ªÉn c√¢u
        if (isTransitioningQuestion) return false;
        // Ch·ªâ cho d√πng n·∫øu ch∆∞a d√πng trong c√¢u hi·ªán t·∫°i
        return !usedToolsThisQuestion.has(serverTool);
    };

    // Handler khi quiz ho√†n th√†nh
    const handleQuizComplete = (score: number, totalQuestions: number) => {
        console.log(`üéØ Quiz completed! Score: ${score}/${totalQuestions}`);
        // C√≥ th·ªÉ th√™m logic ƒë·ªÉ l∆∞u ƒëi·ªÉm s·ªë ho·∫∑c hi·ªÉn th·ªã k·∫øt qu·∫£
    };

    // N·∫øu user ƒë√£ ƒëƒÉng nh·∫≠p, hi·ªÉn th·ªã giao di·ªán 3 c·ªôt nh∆∞ m·∫´u
    if (isInitialized && user) {
        return (
            <div className="h-screen flex flex-col">
                <Header 
                    currentRoom={currentRoom}
                    wsConnected={wsConnected}
                    roomWsConnected={roomWsConnected}
                    userBag={userBag}
                />
                
                <div className="flex-1 overflow-hidden">
                    <div className="w-full py-6 h-full">
                        {/* Layout 3 c·ªôt kh·ªõp v·ªõi header: Rooms - Quiz - Leaderboard */}
                        <div className="flex gap-6 h-full pt-20">
                            {/* C·ªôt tr√°i - Danh s√°ch rooms (w-1/3) */}
                            <div className="w-1/3 flex flex-col h-full min-h-0">
                                <div className="rounded-lg p-4 h-full flex flex-col min-h-0">
                                    {loading ? (
                                        <div className="flex items-center justify-center h-32">
                                            <LoadingSpinner text="ƒêang t·∫£i danh s√°ch rooms..." />
                                        </div>
                                    ) : error ? (
                                        <div className="flex items-center justify-center h-32">
                                            <div className="text-red-400 text-center">
                                                <p>{error}</p>
                                                <button
                                                    onClick={() => initialize()}
                                                    className="mt-2 text-blue-400 hover:text-blue-300 underline"
                                                >
                                                    Th·ª≠ l·∫°i
                                                </button>
                                            </div>
                                        </div>
                                    ) : (
                                        <div className="flex flex-col h-full min-h-0">
                                            {/* RoomList wrapper v·ªõi scroll */}
                                            <div className="flex-1 overflow-y-auto min-h-0">
                                                <RoomList
                                                    rooms={rooms}
                                                    currentRoom={currentRoom}
                                                    onRoomClick={handleRoomClick}
                                                />
                                            </div>
                                        </div>
                                    )}
                                </div>
                            </div>

                            {/* C·ªôt gi·ªØa - Quiz Card (w-1/3) */}
                            <div className="w-1/3 flex flex-col h-full min-h-0">
                                {showQuiz && quizQuestions && quizQuestions.length > 0 ? (
                                    <>
                                        <div className="flex-1 min-h-0">
                                            <QuizCard
                                                ref={quizCardRef}
                                                questions={quizQuestions}
                                                onSubmitAnswer={handleQuizAnswer}
                                                submitAnswer={submitAnswer}
                                                onHintUsed={handleHintUsed}
                                                scoreChange={currentScoreChange}
                                                onQuestionChange={handleQuestionChange}
                                                onTransitionChange={handleTransitionChange}
                                            />
                                        </div>
                                        {/* Help Tool b√™n d∆∞·ªõi Quiz Card */}
                                        <HelpTool 
                                            userBag={userBag || undefined} 
                                            sendHelpTool={sendHelpTool}
                                            onToolUsed={handleHelpToolUsed}
                                            onUserBagUpdate={handleUserBagUpdate}
                                            onShowToolEffect={handleShowToolEffect}
                                            disabled={isTransitioningQuestion}
                                            canUseTool={canUseTool}
                                        />
                                    </>
                                ) : (
                                    <div className="bg-white/10 rounded-3xl h-full flex items-center justify-center  mx-12">
                                        <div className="text-center text-white">
                                            <h3 className="text-lg font-semibold mb-4">Ch·ªçn room</h3>
                                            <p className="text-sm">Click v√†o room ·ªü b√™n tr√°i ƒë·ªÉ battle</p>
                                        </div>
                                    </div>
                                )}
                            </div>

                            {/* C·ªôt ph·∫£i - Leaderboard (w-1/3) */}
                            <div className="w-1/3 flex flex-col h-full min-h-0">
                                {/* Wrapper scroll cho Leaderboard */}
                                <div className="flex-1 overflow-y-auto min-h-0 pr-2">
                                    <Leaderboard 
                                        rankings={rankings}
                                        showStreak={true}
                                        showLastAnswer={false}
                                        isLoading={loading}
                                        currentUserId={user?.userId}
                                    />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                {/* Cooldown Overlay */}
                <CooldownOverlay 
                    isVisible={showCooldown}
                    onComplete={onCooldownComplete}
                />
                
                {/* Room Transition Loader */}
                <CooldownOverlay 
                    isVisible={showRoomTransition}
                    onComplete={onRoomTransitionComplete}
                />
                
            </div>
        );
    }

    // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, hi·ªÉn th·ªã form ƒëƒÉng nh·∫≠p tr·ª±c ti·∫øp
    return (
        <LayoutContent>
            <div className="min-h-screen">
                <HomeLoginForm onSuccess={() => {
                    // Form s·∫Ω t·ª± ƒë·ªông x·ª≠ l√Ω sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
                }}/>
            </div>
        </LayoutContent>
    );
};

export default HomePage;