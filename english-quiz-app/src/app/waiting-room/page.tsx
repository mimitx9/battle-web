'use client';

import React, {useState, useRef, useEffect, Suspense} from 'react';
import {useRouter, useSearchParams} from 'next/navigation';
import {useAuth} from '@/hooks/useAuth';
import {quizApi} from '@/lib/api';
import NotificationSlider from '@/components/common/NotificationSlider';
import AttemptLimitModal from '@/components/common/AttemptLimitModal';
import {useAttemptLimit} from '@/hooks/useAttemptLimit';
import {useCamera} from '@/hooks/useCamera';
import {useProtectedAudio} from '@/hooks/useProtectedAudio';
import AudioPlayer from '@/components/common/AudioPlayer';
import { convertBlobToWav } from '@/lib/audioUtils';

const WaitingRoomContent = () => {
    const router = useRouter();
    const searchParams = useSearchParams();
    const {user, loading, isInitialized, incrementAttemptCount} = useAuth();
    const {showLimitModal, closeLimitModal, checkAttemptLimit} = useAttemptLimit();

    // T·∫•t c·∫£ Hooks ph·∫£i ƒë∆∞·ª£c khai b√°o ·ªü ƒë·∫ßu component
    const [isRecording, setIsRecording] = useState(false);
    const [audioBlob, setAudioBlob] = useState<Blob | null>(null);
    const [audioUrl, setAudioUrl] = useState('');
    const [isPlayingSample, setIsPlayingSample] = useState(false);
    const [examId] = useState('449807');
    const [isCreatingAttempt, setIsCreatingAttempt] = useState(false);
    const [isNavigating, setIsNavigating] = useState(false);
    
    // Audio visualization states
    const [mediaStream, setMediaStream] = useState<MediaStream | null>(null);
    const [audioLevels, setAudioLevels] = useState<number[]>([]);
    const [isAudioInitialized, setIsAudioInitialized] = useState(false);
    const audioContextRef = useRef<AudioContext | null>(null);
    const analyserRef = useRef<AnalyserNode | null>(null);
    const animationFrameRef = useRef<number | null>(null);

    // Camera hook
    const {
        stream,
        isCameraOn,
        startCamera,
        stopCamera,
        capturedImage,
        setCapturedImage,
        showCaptureSuccess,
        setShowCaptureSuccess,
        cameraError,
        videoRef,
        canvasRef
    } = useCamera();

    const mediaRecorderRef = useRef<MediaRecorder | null>(null);
    const audioRef = useRef<HTMLAudioElement | null>(null);

    // Sample audio states - kh√¥ng d√πng protection
    const [sampleCurrentTime, setSampleCurrentTime] = useState(0);
    const [sampleDuration, setSampleDuration] = useState(0);
    const [sampleProgress, setSampleProgress] = useState(0);

    // Redirect ƒë·∫øn login n·∫øu kh√¥ng c√≥ user (sau khi ƒë√£ initialized)
    useEffect(() => {
        if (isInitialized && !loading && !user) {
            console.log('üîí WaitingRoom: Redirecting to login - no user found');
            // Th√™m delay nh·ªè ƒë·ªÉ tr√°nh redirect qu√° nhanh
            const timer = setTimeout(() => {
                router.push('/login');
            }, 100);
            return () => clearTimeout(timer);
        }
    }, [isInitialized, loading, user, router]);

    // M·ªü camera khi component mount v√† c√≥ user
    useEffect(() => {
        if (user && !stream && !cameraError) {
            console.log('üöÄ Auto-starting camera for user:', user.username);
            startCamera().catch(error => {
                console.error('‚ùå Auto-start camera failed:', error);
            });
        }
    }, [user, stream, cameraError]); // Include camera states ƒë·ªÉ track changes

    // Fallback: ƒê·∫£m b·∫£o camera start sau khi component ho√†n to√†n mount
    useEffect(() => {
        const timer = setTimeout(() => {
            if (user && !stream && !cameraError) {
                console.log('üöÄ Fallback: Starting camera after timeout');
                startCamera().catch(error => {
                    console.error('‚ùå Fallback camera start failed:', error);
                });
            }
        }, 1000); // Delay 1 gi√¢y

        return () => clearTimeout(timer);
    }, []); // Ch·ªâ ch·∫°y m·ªôt l·∫ßn khi mount


    // Setup audio event listeners cho sample audio - v·ªõi progress tracking
    useEffect(() => {
        const audio = audioRef.current;
        if (!audio) return;

        const handleLoadedMetadata = () => {
            console.log('üéµ Sample audio metadata loaded, duration:', audio.duration);
            if (Number.isFinite(audio.duration) && audio.duration > 0) {
                setSampleDuration(audio.duration);
            }
        };

        const handleDurationChange = () => {
            if (Number.isFinite(audio.duration) && audio.duration > 0) {
                console.log('üéµ Sample audio durationchange:', audio.duration);
                setSampleDuration(audio.duration);
            }
        };

        const handleCanPlay = () => {
            if (Number.isFinite(audio.duration) && audio.duration > 0) {
                console.log('üéµ Sample audio canplay, duration:', audio.duration);
                setSampleDuration(audio.duration);
            }
        };

        const handleTimeUpdate = () => {
            const current = audio.currentTime;
            const total = audio.duration;

            setSampleCurrentTime(current);

            if (total > 0) {
                const currentProgress = (current / total) * 100;
                setSampleProgress(currentProgress);
                // ƒê·∫£m b·∫£o thi·∫øt l·∫≠p t·ªïng th·ªùi l∆∞·ª£ng khi metadata ch∆∞a s·∫µn s√†ng
                setSampleDuration(prev => (prev > 0 ? prev : total));
            }
        };

        const handlePlay = () => {
            console.log('üéµ Sample audio playing');
            setIsPlayingSample(true);
        };

        const handlePause = () => {
            console.log('üéµ Sample audio paused');
            setIsPlayingSample(false);
        };

        const handleEnded = () => {
            console.log('üéµ Sample audio ended');
            setIsPlayingSample(false);
            setSampleProgress(100);
        };

        audio.addEventListener('loadedmetadata', handleLoadedMetadata);
        audio.addEventListener('durationchange', handleDurationChange);
        audio.addEventListener('canplay', handleCanPlay);
        audio.addEventListener('timeupdate', handleTimeUpdate);
        audio.addEventListener('play', handlePlay);
        audio.addEventListener('pause', handlePause);
        audio.addEventListener('ended', handleEnded);

        // Trigger loadedmetadata if already loaded
        if (audio.readyState >= 1) {
            handleLoadedMetadata();
        }

        return () => {
            audio.removeEventListener('loadedmetadata', handleLoadedMetadata);
            audio.removeEventListener('durationchange', handleDurationChange);
            audio.removeEventListener('canplay', handleCanPlay);
            audio.removeEventListener('timeupdate', handleTimeUpdate);
            audio.removeEventListener('play', handlePlay);
            audio.removeEventListener('pause', handlePause);
            audio.removeEventListener('ended', handleEnded);
        };
    }, []);

    // Reset states khi component unmount ho·∫∑c user thay ƒë·ªïi
    useEffect(() => {
        return () => {
            // Cleanup khi component unmount
            setIsCreatingAttempt(false);
            setIsNavigating(false);
            stopCamera(); // T·∫Øt camera khi r·ªùi kh·ªèi waiting room

            // Cleanup audio resources
            if (audioUrl) {
                URL.revokeObjectURL(audioUrl);
            }
        };
    }, [stopCamera]);

    // Reset states khi user thay ƒë·ªïi (tr√°nh state c≈© t·ª´ user kh√°c)
    useEffect(() => {
        setIsCreatingAttempt(false);
        setIsNavigating(false);
    }, [user?.userId]);

    // Fallback: n·∫øu v·∫´n ch∆∞a c√≥ duration, ch·ªß ƒë·ªông load metadata b·∫±ng ƒë·ªëi t∆∞·ª£ng Audio ri√™ng
    useEffect(() => {
        if (sampleDuration > 0) return;
        let cancelled = false;
        const timer = setTimeout(() => {
            if (cancelled || sampleDuration > 0) return;
            const probe = new Audio('/sample-audio.mp3');
            probe.preload = 'metadata';
            const onLoaded = () => {
                if (!cancelled && Number.isFinite(probe.duration) && probe.duration > 0) {
                    setSampleDuration(probe.duration);
                }
                probe.removeEventListener('loadedmetadata', onLoaded);
            };
            probe.addEventListener('loadedmetadata', onLoaded);
            try { probe.load(); } catch {}
        }, 1200);
        return () => {
            cancelled = true;
            clearTimeout(timer);
        };
    }, [sampleDuration]);

    // Kh·ªüi t·∫°o microphone v√† audio context cho visualization
    useEffect(() => {
        const initMicrophone = async () => {
            try {
                console.log('üé§ ƒêang y√™u c·∫ßu quy·ªÅn truy c·∫≠p microphone...');
                const stream = await navigator.mediaDevices.getUserMedia({
                    audio: {
                        echoCancellation: false,
                        noiseSuppression: false,
                        autoGainControl: false,
                        channelCount: 1,
                        sampleRate: 48000
                    }
                });

                console.log('üé§ ƒê√£ c√≥ quy·ªÅn truy c·∫≠p microphone');
                setMediaStream(stream);

                // T·∫°o AudioContext ƒë·ªÉ ph√¢n t√≠ch audio
                const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
                
                // ƒê·∫£m b·∫£o AudioContext kh√¥ng b·ªã suspend
                if (audioContext.state === 'suspended') {
                    await audioContext.resume();
                }
                
                const analyser = audioContext.createAnalyser();
                const source = audioContext.createMediaStreamSource(stream);

                analyser.fftSize = 256;
                analyser.smoothingTimeConstant = 0.3;
                analyser.minDecibels = -90;
                analyser.maxDecibels = -10;
                source.connect(analyser);

                audioContextRef.current = audioContext;
                analyserRef.current = analyser;
                setIsAudioInitialized(true);

                console.log('üé§ AudioContext ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o, b·∫Øt ƒë·∫ßu ph√¢n t√≠ch audio');

                // B·∫Øt ƒë·∫ßu ph√¢n t√≠ch audio levels
                updateAudioLevels();

            } catch (error) {
                console.error('‚ùå Kh√¥ng th·ªÉ truy c·∫≠p microphone:', error);
                setIsAudioInitialized(false);
            }
        };

        initMicrophone();

        return () => {
            console.log('üßπ D·ªçn d·∫πp microphone v√† audio context');
            if (mediaStream) {
                mediaStream.getTracks().forEach(track => {
                    track.stop();
                    console.log('üõë ƒê√£ d·ª´ng track:', track.kind);
                });
            }
            if (audioContextRef.current) {
                audioContextRef.current.close();
            }
            if (animationFrameRef.current) {
                cancelAnimationFrame(animationFrameRef.current);
            }
        };
    }, []);

    // C·∫≠p nh·∫≠t audio levels li√™n t·ª•c
    const updateAudioLevels = () => {
        if (!analyserRef.current) return;

        const bufferLength = analyserRef.current.frequencyBinCount;
        const dataArray = new Uint8Array(bufferLength);
        analyserRef.current.getByteFrequencyData(dataArray);

        // Chuy·ªÉn ƒë·ªïi th√†nh m·∫£ng s·ªë cho visualization
        const levels = Array.from(dataArray).map(value => value / 255);
        
        setAudioLevels(levels);
        animationFrameRef.current = requestAnimationFrame(updateAudioLevels);
    };

    // Hi·ªÉn th·ªã loading state n·∫øu ƒëang loading ho·∫∑c ch∆∞a initialized
    if (loading || !isInitialized) {
        return (
            <div className="min-h-screen bg-gray-50 font-sans">
                <div className="flex flex-col items-center justify-center min-h-screen gap-4">
                    <div className="w-10 h-10 border-4 border-gray-200 border-t-blue-600 rounded-full animate-spin"></div>
                    <p className="text-gray-600 text-base font-medium">ƒêang t·∫£i th√¥ng tin ng∆∞·ªùi d√πng...</p>
                </div>
            </div>
        );
    }

    // Hi·ªÉn th·ªã loading n·∫øu ƒëang redirect (ƒë·ª£i m·ªôt ch√∫t ƒë·ªÉ tr√°nh redirect qu√° nhanh)
    if (!user) {
        return (
            <div className="min-h-screen bg-gray-50 font-sans">
                <div className="flex flex-col items-center justify-center min-h-screen gap-4">
                    <div className="w-10 h-10 border-4 border-gray-200 border-t-blue-600 rounded-full animate-spin"></div>
                    <p className="text-gray-600 text-base font-medium">ƒêang chuy·ªÉn h∆∞·ªõng...</p>
                </div>
            </div>
        );
    }


    // const handleLogout = () => {
    //     alert('ƒêƒÉng xu·∫•t th√†nh c√¥ng!');
    // };

    const handleTakePhoto = () => {
        if (!videoRef.current || !canvasRef.current) return;

        const video = videoRef.current;
        const canvas = canvasRef.current;
        const context = canvas.getContext('2d');

        if (!context) return;

        // Set canvas size to match video
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;

        // Draw current video frame to canvas
        context.drawImage(video, 0, 0, canvas.width, canvas.height);

        // Convert canvas to image data URL
        const imageDataUrl = canvas.toDataURL('image/png');
        setCapturedImage(imageDataUrl);

        // L∆∞u ·∫£nh v√†o localStorage ƒë·ªÉ s·ª≠ d·ª•ng ·ªü c√°c trang quiz
        localStorage.setItem('user_captured_photo', imageDataUrl);

        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        setShowCaptureSuccess(true);

        // T·ª± ƒë·ªông ·∫©n th√¥ng b√°o sau 3 gi√¢y
        setTimeout(() => {
            setShowCaptureSuccess(false);
        }, 3000);

        console.log('üì∏ Photo captured and saved to localStorage');
    };

    const handleRetakePhoto = () => {
        setCapturedImage(null);
        localStorage.removeItem('user_captured_photo');
        setShowCaptureSuccess(false);
        console.log('üì∏ Photo cleared, ready for retake');
    };

    const handlePlaySampleAudio = () => {
        if (audioRef.current) {
            // N·∫øu duration ch∆∞a ƒë∆∞·ª£c set, l·∫•y l·∫°i t·ª´ th·∫ª audio khi ng∆∞·ªùi d√πng t∆∞∆°ng t√°c
            if ((!Number.isFinite(sampleDuration) || sampleDuration === 0) &&
                Number.isFinite(audioRef.current.duration) && audioRef.current.duration > 0) {
                setSampleDuration(audioRef.current.duration);
            }
            if (isPlayingSample) {
                audioRef.current.pause();
                setIsPlayingSample(false);
            } else {
                audioRef.current.play();
                setIsPlayingSample(true);
            }
        }
    };

    const handleRecord = async () => {
        try {
            // N·∫øu ƒëang thu √¢m, d·ª´ng l·∫°i
            if (isRecording) {
                if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {
                    mediaRecorderRef.current.stop();
                }
                setIsRecording(false);
                return;
            }

            // Xin ph√©p s·ª≠ d·ª•ng microphone
            console.log('üé§ Requesting microphone access...');
            const stream = await navigator.mediaDevices.getUserMedia({
                audio: {
                    echoCancellation: true,
                    noiseSuppression: true,
                    autoGainControl: true,
                    sampleRate: 44100
                }
            });

            console.log('üé§ Microphone access granted, creating MediaRecorder...');

            // Ki·ªÉm tra ƒë·ªãnh d·∫°ng ƒë∆∞·ª£c h·ªó tr·ª£
            const mimeType = MediaRecorder.isTypeSupported('audio/webm') ? 'audio/webm' :
                MediaRecorder.isTypeSupported('audio/mp4') ? 'audio/mp4' :
                    MediaRecorder.isTypeSupported('audio/ogg') ? 'audio/ogg' : 'audio/wav';

            console.log('üé§ Using MIME type:', mimeType);

            const mediaRecorder = new MediaRecorder(stream, {mimeType});
            mediaRecorderRef.current = mediaRecorder;

            const chunks: BlobPart[] = [];

            mediaRecorder.ondataavailable = (event) => {
                console.log('üé§ Data available, chunk size:', event.data.size);
                chunks.push(event.data);
            };

            mediaRecorder.onstop = async () => {
                console.log('üé§ Recording stopped, creating audio file...');
                const rawBlob = new Blob(chunks, {type: mimeType});
                console.log('üé§ Raw audio blob created:', { type: rawBlob.type, size: rawBlob.size });
                // Convert to WAV to satisfy backend requirement
                let blob: Blob = rawBlob;
                try {
                    blob = await convertBlobToWav(rawBlob);
                    console.log('üé§ Converted WAV blob:', { type: blob.type, size: blob.size });
                } catch (e) {
                    console.warn('‚ö†Ô∏è WAV conversion failed, using raw blob instead:', e);
                }

                if (blob.size > 0) {
                    setAudioBlob(blob);
                    const url = URL.createObjectURL(blob);
                    setAudioUrl(url);
                    console.log('üé§ Audio URL created:', url);
                } else {
                    console.error('üé§ Empty audio blob created');
                }

                // D·ª´ng c√°c track audio
                stream.getTracks().forEach(track => {
                    console.log('üé§ Stopping track:', track.kind);
                    track.stop();
                });
            };

            mediaRecorder.onerror = (event) => {
                console.error('üé§ MediaRecorder error:', event);
                setIsRecording(false);
                stream.getTracks().forEach(track => track.stop());
            };

            mediaRecorder.onstart = () => {
                console.log('üé§ Recording started');
                setIsRecording(true);
            };

            // B·∫Øt ƒë·∫ßu thu √¢m
            mediaRecorder.start();
            console.log('üé§ Starting recording...');

        } catch (error) {
            console.error('‚ö†Ô∏è Error recording audio:', error);
            setIsRecording(false);

            let errorMessage = 'Kh√¥ng th·ªÉ truy c·∫≠p microphone. ';
            if (error instanceof Error) {
                if (error.name === 'NotAllowedError') {
                    errorMessage += 'Vui l√≤ng c·∫•p quy·ªÅn truy c·∫≠p microphone trong tr√¨nh duy·ªát.';
                } else if (error.name === 'NotFoundError') {
                    errorMessage += 'Kh√¥ng t√¨m th·∫•y microphone. Vui l√≤ng k·∫øt n·ªëi microphone v√† th·ª≠ l·∫°i.';
                } else if (error.name === 'NotReadableError') {
                    errorMessage += 'Microphone ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi ·ª©ng d·ª•ng kh√°c.';
                } else {
                    errorMessage += 'Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.';
                }
            }
            alert(errorMessage);
        }
    };


    const handleStartExam = async () => {
        // Ki·ªÉm tra n·∫øu ƒëang trong qu√° tr√¨nh t·∫°o quiz ho·∫∑c navigate
        if (isCreatingAttempt || isNavigating) {
            console.log('üö´ Quiz creation already in progress, ignoring duplicate call');
            return;
        }

        // Ki·ªÉm tra xem c√≥ attemptId t·ª´ clone kh√¥ng
        const attemptIdParam = searchParams.get('attemptId');
        const isClonedAttempt = attemptIdParam !== null;

        console.log('üîç Attempt ID from URL:', attemptIdParam, 'isClonedAttempt:', isClonedAttempt);

        // N·∫øu kh√¥ng ph·∫£i cloned attempt, ki·ªÉm tra gi·ªõi h·∫°n attempt
        if (!isClonedAttempt && !checkAttemptLimit(user)) {
            return; // Modal s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã t·ª± ƒë·ªông
        }

        console.log('üöÄ Starting quiz process...', isClonedAttempt ? '(cloned attempt)' : '(new attempt)');
        setIsCreatingAttempt(true);

        try {
            let attempt;

            if (isClonedAttempt) {
                // N·∫øu l√† cloned attempt, g·ªçi getInProgressAttempt
                console.log('üîÑ Getting in-progress attempt for cloned quiz...');
                attempt = await quizApi.getInProgressAttempt();
                console.log('‚úÖ In-progress attempt retrieved successfully:', attempt);
            } else {
                // N·∫øu l√† attempt m·ªõi, t·∫°o attempt m·ªõi
                console.log('üÜï Creating new quiz attempt...');
                attempt = await quizApi.createAttempt();
                console.log('‚úÖ Quiz attempt created successfully:', attempt);

                // TƒÉng countAttempt trong cache ngay sau khi t·∫°o th√†nh c√¥ng
                incrementAttemptCount();
            }

            // ƒê√°nh d·∫•u ƒëang navigate ƒë·ªÉ tr√°nh duplicate calls
            setIsNavigating(true);

            // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang quiz listening (b·∫Øt ƒë·∫ßu t·ª´ listening)
            router.push('/quiz/listening');

        } catch (error) {
            console.error('‚ùå Error in quiz process:', error);

            // Reset states khi c√≥ l·ªói
            setIsCreatingAttempt(false);
            setIsNavigating(false);

            // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói chi ti·∫øt h∆°n
            let errorMessage = 'C√≥ l·ªói x·∫£y ra khi t·∫°o b√†i thi. ';
            if (error instanceof Error) {
                if (error.message.includes('network') || error.message.includes('fetch')) {
                    errorMessage += 'Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.';
                } else if (error.message.includes('unauthorized') || error.message.includes('401')) {
                    errorMessage += 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';
                } else if (error.message.includes('limit') || error.message.includes('403')) {
                    errorMessage += 'B·∫°n ƒë√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n s·ªë l·∫ßn thi.';
                } else {
                    errorMessage += 'Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.';
                }
            } else {
                errorMessage += 'Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.';
            }

            // C√≥ th·ªÉ th√™m toast notification ·ªü ƒë√¢y thay v√¨ alert
            console.log('üí¨ Error message for user:', errorMessage);
            // alert(errorMessage);
        }
        // Kh√¥ng reset isCreatingAttempt ·ªü ƒë√¢y v√¨ s·∫Ω ƒë∆∞·ª£c reset khi navigate
    };

    return (
        <div className="min-h-screen bg-white font-sans">
            {/* Capture Success Notification */}
            {showCaptureSuccess && (
                <div className="fixed top-0 left-0 right-0 z-50 bg-green-500 text-white px-4 py-3 text-center font-medium">
                    <div className="flex items-center justify-center space-x-2">
                        <span>‚úÖ</span>
                        <span>Ch·ª•p ·∫£nh th√†nh c√¥ng!</span>
                    </div>
                </div>
            )}

            {/* Main Content */}
            <div className="max-w-6xl mx-auto px-6 py-8">
                {/* Top Instruction */}
                <div className="text-center mb-6">
                    <p className="text-xs text-gray-600">Vui l√≤ng c·∫•p quy·ªÅn s·ª≠ d·ª•ng micro cho tr√¨nh duy·ªát tr∆∞·ªõc khi thi.</p>
                </div>

                {/* Top Section with Camera and User Info */}
                <div className="flex justify-center mb-8">
                    <div className="flex items-start gap-12">
                        {/* Camera Placeholder */}
                        <div className="relative">
                            <div className="w-32 h-32 bg-gray-100 border-2 border-gray-300 rounded overflow-hidden relative">
                                {/* Video Camera */}
                                <video
                                    ref={videoRef}
                                    autoPlay
                                    playsInline
                                    muted
                                    className="w-full h-full object-cover absolute top-0 left-0"
                                    style={{ display: isCameraOn ? 'block' : 'none' }}
                                />

                                {/* Captured Image */}
                                {capturedImage && (
                                    <img
                                        src={capturedImage}
                                        alt="Captured photo"
                                        className="w-full h-full object-cover absolute top-0 left-0"
                                    />
                                )}

                                {/* Loading/Error states */}
                                {!isCameraOn && !cameraError && !capturedImage && (
                                    <div className="w-full h-full flex items-center justify-center text-gray-400">
                                        <div className="text-center">
                                            <div className="text-3xl mb-2">üì∑</div>
                                            <div className="text-xs">ƒêang t·∫£i camera...</div>
                                        </div>
                                    </div>
                                )}

                                {cameraError && !capturedImage && (
                                    <div className="w-full h-full flex items-center justify-center text-gray-400">
                                        <div className="text-center">
                                            <div className="text-3xl mb-2">‚ö†Ô∏è</div>
                                            <div className="text-xs">L·ªói camera</div>
                                        </div>
                                    </div>
                                )}
                            </div>

                            {/* Take Photo Button */}
                            <div className="mt-4 text-center">
                                {capturedImage ? (
                                    <button
                                        onClick={handleRetakePhoto}
                                        className="text-white px-8 py-2.5 rounded-full text-xs font-bold transition-colors"
                                        style={{ backgroundColor: '#FFBA08' }}
                                    >
                                        CH·ª§P L·∫†I
                                    </button>
                                ) : (
                                    <button
                                        onClick={handleTakePhoto}
                                        disabled={!isCameraOn}
                                        className="text-white px-8 py-2.5 bg-red-500 rounded-full text-xs font-bold transition-colors disabled:bg-gray-300 disabled:cursor-not-allowed"
                                    >
                                        CH·ª§P H√åNH
                                    </button>
                                )}
                            </div>
                        </div>

                        {/* User Info */}
                        <div className="space-y-3 pt-4">
                            <div className="flex gap-2">
                                <span className="text-xs text-gray-700">H·ªç t√™n:</span>
                                <span className="text-xs font-bold text-black">{user.fullName || user.username}</span>
                            </div>
                            <div className="flex gap-2">
                                <span className="text-xs text-gray-700">T√†i kho·∫£n:</span>
                                <span className="text-xs font-bold text-black">{user.username.toUpperCase()}</span>
                            </div>
                            <div className="flex gap-2">
                                <span className="text-xs text-gray-700">T√†i kho·∫£n:</span>
                                <span className="text-xs font-bold text-black">
                                    {user.faTestInfo?.isPaid
                                        ? (user.faTestInfo.plan === 'LIFETIME' ? 'G√≥i Tr·ªçn ƒê·ªùi' :
                                            user.faTestInfo.plan === 'YEARLY' ? 'G√≥i NƒÉm' :
                                                user.faTestInfo.plan === 'MONTHLY' ? 'G√≥i Th√°ng' : 'Premium')
                                        : 'Mi·ªÖn ph√≠'
                                    }
                                </span>
                            </div>
                            <div className="flex gap-2">
                                <span className="text-xs text-gray-700">M√£ ƒë·ªÅ thi:</span>
                                <span className="text-xs font-bold text-black">{examId}</span>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Three Columns Section */}
                <div className="grid grid-cols-1 lg:grid-cols-[0.8fr_1fr_1fr] gap-0 mt-12">
                    {/* Section 1: Exam Structure */}
                    <div className="bg-white rounded-lg pl-2 pr-8 py-4">
                        <div className="flex items-center mb-6">
                            <div className="w-10 h-10 rounded-full flex items-center justify-center mr-3 flex-shrink-0" style={{ backgroundColor: '#FFBA08' }}>
                                <span className="text-white font-bold text-lg">1</span>
                            </div>
                            <h2 className="text-sm font-bold text-black">C·∫§U TR√öC B√ÄI THI</h2>
                        </div>

                        <div className="space-y-3 text-xs">
                            <p className="text-black leading-relaxed">
                                K·ªπ nƒÉng 1: NGHE ‚Äì 3 ph·∫ßn <span className="text-gray-600">(47 ph√∫t)</span>
                            </p>
                            <p className="text-black leading-relaxed">
                                K·ªπ nƒÉng 2: ƒê·ªåC ‚Äì 4 ph·∫ßn <span className="text-gray-600">(60 ph√∫t)</span>
                            </p>
                            <p className="text-black leading-relaxed">
                                K·ªπ nƒÉng 3: VI·∫æT ‚Äì 2 ph·∫ßn <span className="text-gray-600">(60 ph√∫t)</span>
                            </p>
                            <p className="text-black leading-relaxed">
                                K·ªπ nƒÉng 4: N√ìI ‚Äì 3 ph·∫ßn <span className="text-gray-600">(12 ph√∫t)</span>
                            </p>
                        </div>
                    </div>

                    {/* Section 2: Sound Check */}
                    <div className="bg-white rounded-lg p-6">
                        <div className="flex items-center mb-6">
                            <div className="w-10 h-10 rounded-full flex items-center justify-center mr-3 flex-shrink-0" style={{ backgroundColor: '#FFBA08' }}>
                                <span className="text-white font-bold text-lg">2</span>
                            </div>
                            <h2 className="text-sm font-bold text-black">KI·ªÇM TRA √ÇM THANH</h2>
                        </div>

                        <div className="space-y-4">
                            {/* Step 1: Sample Audio */}
                            <div>
                                <p className="text-xs text-black mb-3 leading-relaxed">- B∆∞·ªõc 1: Nghe ƒëo·∫°n audio m·∫´u b√™n d∆∞·ªõi.</p>
                                <div className="p-4">
                                    <AudioPlayer
                                        onPlayClick={handlePlaySampleAudio}
                                        isPlaying={isPlayingSample}
                                        hasPlayedOnce={false}
                                        progressPercent={sampleProgress}
                                        currentTimeLabel={`${Math.floor(sampleCurrentTime / 60)}:${Math.floor(sampleCurrentTime % 60).toString().padStart(2, '0')}`}
                                        totalTimeLabel={`${Math.floor(sampleDuration / 60)}:${Math.floor(sampleDuration % 60).toString().padStart(2, '0')}`}
                                    />
                                </div>
                            </div>

                            {/* Step 2: Microphone Instructions */}
                            <div>
                                <p className="text-xs text-black leading-relaxed">- B∆∞·ªõc 2: ƒê·∫∑t mic s√°t mi·ªáng.</p>
                            </div>

                            {/* Step 3: Recording */}
                            <div>
                                <p className="text-xs text-black mb-3 leading-relaxed">- B∆∞·ªõc 3: B·∫•m "Thu √¢m" ‚Üí sau ƒë√≥ "Nghe l·∫°i".</p>

                                {/* Waveform Visualization */}
                                <div className="mb-4">
                                    <div className="bg-gray-100 rounded-lg p-4 h-24 flex items-center justify-center">
                                        {isAudioInitialized && audioLevels.length > 0 ? (
                                            <div className="flex items-center space-x-1 h-full w-full">
                                                {audioLevels.slice(0, 80).map((level, index) => {
                                                    // TƒÉng ƒë·ªô nh·∫°y v√† l√†m cho s√≥ng √¢m r√µ r√†ng h∆°n
                                                    const scaledLevel = Math.min(level * 3, 1); // TƒÉng ƒë·ªô nh·∫°y l√™n 3 l·∫ßn
                                                    const height = Math.max(scaledLevel * 100, 2); // T·ªëi thi·ªÉu 2% chi·ªÅu cao
                                                    
                                                    return (
                                                        <div
                                                            key={index}
                                                            className="rounded-sm transition-all duration-75"
                                                            style={{
                                                                width: '2px',
                                                                height: `${height}%`,
                                                                backgroundColor: isRecording ? '#ef4444' : '#3b82f6',
                                                                minHeight: '2px'
                                                            }}
                                                        />
                                                    );
                                                })}
                                            </div>
                                        ) : (
                                            <div className="text-gray-400 text-xs">
                                                {isAudioInitialized ? 'ƒêang ph√¢n t√≠ch audio...' : 'ƒêang kh·ªüi t·∫°o microphone...'}
                                            </div>
                                        )}
                                    </div>
                                </div>

                                {/* Status Text */}
                                <div className="text-center mb-3">
                                    {isRecording ? (
                                        <div className="text-xs font-bold" style={{ color: '#FFBA08' }}>
                                            ƒêANG THU √ÇM - VUI L√íNG ƒê·ªÇ √ù S√ìNG √ÇM ƒê·ªÇ ƒêI·ªÄU CH·ªàNH MIC
                                        </div>
                                    ) : (
                                        <div className="text-xs font-bold text-gray-600">
                                            Microphone ƒë√£ s·∫µn s√†ng
                                        </div>
                                    )}
                                </div>

                                <div className="flex gap-3 mb-3">
                                    <button
                                        onClick={handleRecord}
                                        className={`px-6 py-2.5 rounded-full text-xs font-bold transition-colors ${
                                            isRecording
                                                ? 'bg-orange-500 text-white hover:bg-orange-600'
                                                : 'bg-red-500 text-white hover:bg-red-600'
                                        }`}
                                    >
                                        {isRecording ? 'ƒêang thu...' : 'Thu √¢m'}
                                    </button>

                                    {audioUrl && !isRecording && (
                                        <button className="text-white px-6 py-2.5 rounded-full text-xs font-bold transition-colors"
                                        style={{ backgroundColor: '#FFBA08' }}>
                                            Nghe l·∫°i
                                        </button>
                                    )}
                                </div>

                                {/* Audio Player */}
                                {audioUrl && !isRecording && (
                                    <div className="mt-3">
                                        <audio
                                            controls
                                            src={audioUrl}
                                            className="w-full h-10"
                                            controlsList="nodownload noplaybackrate noremoteplayback"
                                        />
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>

                    {/* Section 3: Notes */}
                    <div className="bg-white rounded-lg p-6">
                        <div className="flex items-center mb-6">
                            <div className="w-10 h-10 rounded-full flex items-center justify-center mr-3 flex-shrink-0" style={{ backgroundColor: '#FFBA08' }}>
                                <span className="text-white font-bold text-lg">3</span>
                            </div>
                            <h2 className="text-sm font-bold text-black">L∆ØU √ù</h2>
                        </div>

                        <div className="space-y-4">
                            <p className="text-xs text-black leading-relaxed">
                                - Khi h·∫øt th·ªùi gian m·ªói k·ªπ nƒÉng, h·ªá th·ªëng t·ª± ƒë·ªông chuy·ªÉn ti·∫øp.
                            </p>
                            <p className="text-xs text-black leading-relaxed">
                                - B·∫•m "TI·∫æP T·ª§C" ƒë·ªÉ sang part ho·∫∑c k·ªπ nƒÉng k·∫ø ti·∫øp.
                            </p>

                            <button
                                onClick={handleStartExam}
                                disabled={isCreatingAttempt || isNavigating}
                                className={`px-8 py-4 rounded-full text-sm font-bold transition-colors w-full shadow-lg ${
                                    (isCreatingAttempt || isNavigating)
                                        ? 'bg-gray-300 cursor-not-allowed text-gray-500'
                                        : 'text-white hover:opacity-90'
                                }`}
                                style={{
                                    backgroundColor: (isCreatingAttempt || isNavigating) ? undefined : '#0D7ADE'
                                }}
                            >
                                {isCreatingAttempt ? 'ƒêANG T·∫†O B√ÄI THI...' :
                                    isNavigating ? 'ƒêANG CHUY·ªÇN TRANG...' :
                                        'NH·∫¨N ƒê·ªÄ'}
                            </button>

                            <p className="text-xs text-gray-600 text-center leading-relaxed">
                                ho·∫∑c quay l·∫°i <span
                                className="text-blue-600 cursor-pointer hover:text-blue-800"
                                onClick={() => router.push('/quiz/history')}
                            >
                                trang qu·∫£n l√Ω t√†i kho·∫£n
                            </span>
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            {/* Hidden elements */}
            <audio ref={audioRef} src="/sample-audio.mp3" preload="auto" style={{display: 'none'}} />

            {/* Hidden canvas for photo capture */}
            <canvas ref={canvasRef} style={{display: 'none'}}></canvas>

            {/* Attempt Limit Modal */}
            <AttemptLimitModal
                isOpen={showLimitModal}
                onClose={closeLimitModal}
                currentAttempts={user?.countAttempt || 0}
                maxAttempts={1}
            />
        </div>
    );
};

const WaitingRoomPage = () => {
    return (
        <Suspense fallback={
            <div className="min-h-screen bg-gray-50 font-sans">
                <div className="flex flex-col items-center justify-center min-h-screen gap-4">
                    <div className="w-10 h-10 border-4 border-gray-200 border-t-blue-600 rounded-full animate-spin"></div>
                    <p className="text-gray-600 text-base font-medium">ƒêang t·∫£i trang...</p>
                </div>
            </div>
        }>
            <WaitingRoomContent />
        </Suspense>
    );
};

export default WaitingRoomPage;